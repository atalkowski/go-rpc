name: ci-test

on:
  push:
    branches: [develop]
  pull_request:
    branches: [main]

jobs:

  test:
    name: Build
    runs-on: ubuntu-latest

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:16
        # Provide the password for postgres
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: mysecret
          POSTGRES_DB: simple_bank
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.22
      id: go 
  
    - name: Check out code into Go module directory
      uses: actions/checkout@v2
    
    - name: Install golang-migrate needed to set up our database in postgress
      run: |
        curl -L https://github.com/golang-migrate/migrate/releases/download/v4.17.1/migrate.linux-amd64.tar.gz | tar xvz
        sudo mv migrate /usr/bin
        
    - name: Run migrations to setup the pg database
      run: make migrateup
    
    - name: Test
      run: make test

# These steps in the go setup are not needed ... they are pulled in automatically
#    - name: Get dependencies
#      run: |
#        echo go get -v -t -d ./...
#         if [ -f Gopkg.toml ]; then
#          curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
#          dep ensure
#         fi
# And this is done during the test anyway.
#    - name: Build
#      run: go build -v 
#
